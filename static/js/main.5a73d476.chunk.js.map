{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactList/transitions/pop.module.css","components/ContactForm/ContactForm.module.css","components/Notification/Notification.module.css","components/App/App.module.css","components/Notification/transitions/slide.module.css","redux/types.js","redux/contacts/contactsReducers.js","redux/filter/filterReducers.js","redux/rootReducer.js","redux/store.js","components/ContactList/ContactList.jsx","redux/contacts/contactsActions.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/Notification/Notification.jsx","components/Logo/Logo.jsx","components/App/App.jsx","index.js"],"names":["module","exports","initialState","items","filtratedItems","contactsReducer","state","action","type","types","payload","contact","filter","item","id","name","toLowerCase","includes","filterReducer","rootReducer","combineReducers","contacts","contactsReducers","filterReducers","store","createStore","devToolsEnhancer","ContactList","onGetItemsFromStorage","this","props","persistedContacts","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","onDelete","length","TransitionGroup","component","className","styles","list","map","number","CSSTransition","key","timeout","classNames","popTransition","AsYouType","input","button","onClick","Component","connect","dispatch","contactsActions","ContactForm","handleChange","target","setState","value","handleSubmit","e","preventDefault","onAddItem","uuid","clearState","onSubmit","maxLength","placeholder","onChange","required","Filter","onSetFilter","loginInputId","Notification","notificationBox","Logo","in","appear","App","isVisible","setFilter","onFiltrate","prevState","container","slideTransition","unmountOnExit","onEntered","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a73d476.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactList_button__gqSXO\",\"list\":\"ContactList_list__-RokV\",\"item\":\"ContactList_item__3z15n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__u253h\",\"enterActive\":\"pop_enterActive__PR8lQ\",\"exit\":\"pop_exit__t4BIn\",\"exitActive\":\"pop_exitActive__2evRG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactForm_button__vJRWI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notificationBox\":\"Notification_notificationBox__3I0BF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1LaPt\",\"title\":\"App_title__1jWu0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__1gYCy\",\"enterActive\":\"slide_enterActive__3UYrh\",\"exit\":\"slide_exit__2-utf\",\"exitActive\":\"slide_exitActive__ETTpF\"};","export default {\n  ADD_CONTACT: 'ADD_CONTACT',\n  DELETE_CONTACT: 'DELETE_CONTACT',\n  FILTRATE_CONTACTS: 'FILTRATE_CONTACT',\n  GET_ITEMS: 'GET_ITEMS_FROM_STORAGE',\n  SET_FILTER: 'SET_FILTER',\n};\n","import types from '../types';\n\nconst initialState = {\n  items: [],\n  filtratedItems: [],\n};\n\nconst contactsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.ADD_CONTACT:\n      return { ...state, items: [...state.items, action.payload.contact] };\n\n    case types.DELETE_CONTACT:\n      return {\n        ...state,\n        items: state.items.filter(item => item.id !== action.payload.id),\n      };\n\n    case types.GET_ITEMS:\n      return { ...state, items: [...action.payload.items] };\n\n    case types.FILTRATE_CONTACTS:\n      return {\n        ...state,\n        filtratedItems: state.items.filter(item =>\n          item.name.toLowerCase().includes(action.payload.filter.toLowerCase()),\n        ),\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default contactsReducer;\n","import types from '../types';\n\nconst initialState = {\n  filter: '',\n};\n\nconst filterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.SET_FILTER:\n      return {\n        filter: action.payload.filter,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { combineReducers } from 'redux';\nimport contactsReducers from './contacts/contactsReducers';\nimport filterReducers from './filter/filterReducers';\n\nconst rootReducer = combineReducers({\n  contacts: contactsReducers,\n  filter: filterReducers,\n});\n\nexport default rootReducer;\n","import { createStore } from 'redux';\nimport { devToolsEnhancer } from 'redux-devtools-extension';\nimport rootReducer from './rootReducer';\n\nconst store = createStore(rootReducer, devToolsEnhancer());\n\nexport default store;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { AsYouType } from 'libphonenumber-js';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport styles from './ContactList.module.css';\nimport popTransition from './transitions/pop.module.css';\nimport * as contactsActions from '../../redux/contacts/contactsActions';\n\nclass ContactList extends Component {\n  static propTypes = {\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      }),\n    ).isRequired,\n    onDelete: PropTypes.func.isRequired,\n    onGetItemsFromStorage: PropTypes.func.isRequired,\n  };\n\n  componentDidMount() {\n    const { onGetItemsFromStorage } = this.props;\n    const persistedContacts = localStorage.getItem('contacts');\n    if (persistedContacts) {\n      onGetItemsFromStorage(JSON.parse(persistedContacts));\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { items } = this.props;\n    if (prevProps !== this.props) {\n      localStorage.setItem('contacts', JSON.stringify(items));\n    }\n  }\n\n  render() {\n    const { items, onDelete } = this.props;\n\n    return items.length ? (\n      <TransitionGroup component=\"ul\" className={styles.list}>\n        {items.map(({ name, id, number }) => {\n          return (\n            <CSSTransition key={id} timeout={250} classNames={popTransition}>\n              <li className={styles.item}>\n                <span>\n                  {name} {new AsYouType('US').input(number)}\n                </span>\n                <button\n                  className={styles.button}\n                  type=\"button\"\n                  onClick={() => onDelete(id)}\n                >\n                  &#10006;\n                </button>\n              </li>\n            </CSSTransition>\n          );\n        })}\n      </TransitionGroup>\n    ) : null;\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onDelete: id => dispatch(contactsActions.deleteAction(id)),\n\n  onGetItemsFromStorage: items =>\n    dispatch(contactsActions.getItemsFromLocalStorage(items)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactList);\n","import types from '../types';\n\nexport const addAction = item => {\n  return {\n    type: types.ADD_CONTACT,\n    payload: {\n      contact: item,\n    },\n  };\n};\n\nexport const deleteAction = id => ({\n  type: types.DELETE_CONTACT,\n  payload: {\n    id,\n  },\n});\n\nexport const getItemsFromLocalStorage = items => ({\n  type: types.GET_ITEMS,\n  payload: {\n    items,\n  },\n});\n\nexport const filtrateContacts = filter => ({\n  type: types.FILTRATE_CONTACTS,\n  payload: {\n    filter,\n  },\n});\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport uuid from 'uuid';\nimport PropTypes from 'prop-types';\nimport styles from './ContactForm.module.css';\nimport * as contactsActions from '../../redux/contacts/contactsActions';\n\nclass ContactForm extends Component {\n  static propTypes = {\n    onAddItem: PropTypes.func.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = ({ target }) => {\n    this.setState({\n      [target.name]: target.value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    if (this.state.name && this.state.number) {\n      this.props.onAddItem({ ...this.state, id: uuid() });\n    }\n    this.clearState();\n  };\n\n  clearState = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"name\"\n          maxLength=\"36\"\n          placeholder=\"Enter your name...\"\n          onChange={this.handleChange}\n          value={name}\n          required\n        />\n        <input\n          maxLength=\"10\"\n          name=\"number\"\n          type=\"number\"\n          placeholder=\"Enter your number...\"\n          onChange={this.handleChange}\n          value={number}\n          required\n        />\n        <button type=\"submit\" className={styles.button}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onAddItem: item => dispatch(contactsActions.addAction(item)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport uuid from 'uuid';\nimport PropTypes from 'prop-types';\n\nconst Filter = ({ onSetFilter }) => {\n  const loginInputId = uuid();\n\n  return (\n    <form>\n      <h3>Find contact by name</h3>\n      <input\n        onChange={onSetFilter}\n        type=\"text\"\n        name=\"filter\"\n        id={loginInputId}\n        placeholder=\"Enter a name to search...\"\n      />\n    </form>\n  );\n};\n\nFilter.propTypes = {\n  onSetFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React from 'react';\nimport styles from './Notification.module.css';\n\nconst Notification = () => {\n  return <div className={styles.notificationBox}>Contact already exist!</div>;\n};\n\nexport default Notification;\n","import React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport './transitions/logo.css';\n\nconst Logo = () => {\n  return (\n    <CSSTransition in timeout={600} classNames=\"Logo\" appear>\n      <h1>Phonebook</h1>\n    </CSSTransition>\n  );\n};\n\nexport default Logo;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { CSSTransition } from 'react-transition-group';\nimport ContactList from '../ContactList/ContactList';\nimport ContactForm from '../ContactForm/ContactForm';\nimport Filter from '../Filter/Filter';\nimport Notification from '../Notification/Notification';\nimport styles from './App.module.css';\nimport slideTransition from '../Notification/transitions/slide.module.css';\nimport Logo from '../Logo/Logo';\nimport * as contactsActions from '../../redux/contacts/contactsActions';\n\nclass App extends Component {\n  state = {\n    isVisible: false,\n    filter: '',\n  };\n\n  componentDidMount() {\n    const { filter } = this.state;\n    const { onFiltrate } = this.props;\n    onFiltrate(filter);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { filter } = this.state;\n    const { onFiltrate } = this.props;\n    if (prevState.filter !== filter) {\n      onFiltrate(filter);\n    }\n  }\n\n  setFilter = ({ target }) => {\n    this.setState({\n      filter: target.value,\n    });\n  };\n\n  render() {\n    const { filter, isVisible } = this.state;\n    const { items, filtratedItems, onFiltrate } = this.props;\n\n    return (\n      <div className={styles.container}>\n        <Logo />\n        <CSSTransition\n          in={isVisible}\n          timeout={1000}\n          classNames={slideTransition}\n          unmountOnExit\n          onEntered={() => this.setState({ isVisible: false })}\n        >\n          <Notification />\n        </CSSTransition>\n\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter onSetFilter={this.setFilter} />\n        <ContactList items={filtratedItems} />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onFiltrate: filter => dispatch(contactsActions.filtrateContacts(filter)),\n});\n\nconst mapStateToProps = store => ({\n  items: store.contacts.items,\n  filtratedItems: store.contacts.filtratedItems,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}